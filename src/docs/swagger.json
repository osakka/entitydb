{
    "swagger": "2.0",
    "info": {
        "description": "A temporal database with pure entity-based architecture",
        "title": "EntityDB API",
        "termsOfService": "https://github.com/osakka/entitydb",
        "contact": {
            "name": "EntityDB Support",
            "email": "support@entitydb.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/osakka/entitydb/blob/main/LICENSE"
        },
        "version": "2.28.0"
    },
    "host": "localhost:8085",
    "basePath": "/api/v1",
    "paths": {
        "/api/v1/admin/log-level": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current log level and trace subsystems",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get log level",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LogStatusResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change the runtime log level",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Set log level",
                "parameters": [
                    {
                        "description": "Log level",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SetLogLevelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/trace-subsystems": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the currently enabled trace subsystems",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get trace subsystems",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LogStatusResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Enable, disable, or clear trace subsystems",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Configure trace subsystems",
                "parameters": [
                    {
                        "description": "Trace configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SetTraceSubsystemsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Authenticate user with username and password using relationship-based security",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout user by invalidating the current session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Refresh the current session token to extend expiration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Refresh session token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/whoami": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get information about the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Get current user information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.UserInfo"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve current system configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Get configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Configuration namespace",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Configuration key",
                        "name": "key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Entity"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/config/set": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update system configuration values",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Set configuration",
                "parameters": [
                    {
                        "description": "Configuration data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ConfigSetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dashboard/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get dashboard statistics and metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dashboard"
                ],
                "summary": "Dashboard statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.DashboardStatsResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/entities/as-of": {
            "get": {
                "description": "Retrieve an entity as it existed at a specific point in time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "temporal"
                ],
                "summary": "Get entity as of timestamp",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Timestamp in RFC3339 format",
                        "name": "as_of",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Entity"
                        }
                    }
                }
            }
        },
        "/api/v1/entities/changes": {
            "get": {
                "description": "Retrieve entities that have changed since a given timestamp",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "temporal"
                ],
                "summary": "Get recent changes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Timestamp in RFC3339 format (default: 1 hour ago)",
                        "name": "since",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Entity"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/create": {
            "post": {
                "description": "Create a new entity with tags and content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Create a new entity",
                "parameters": [
                    {
                        "description": "Entity to create",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateEntityRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Entity"
                        }
                    }
                }
            }
        },
        "/api/v1/entities/diff": {
            "get": {
                "description": "Compare an entity at two different points in time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "temporal"
                ],
                "summary": "Get entity diff",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "First timestamp in RFC3339 format",
                        "name": "t1",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Second timestamp in RFC3339 format",
                        "name": "t2",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/entities/get": {
            "get": {
                "description": "Retrieve a single entity by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Get entity by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Entity"
                        }
                    }
                }
            }
        },
        "/api/v1/entities/history": {
            "get": {
                "description": "Retrieve the history of an entity within a time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "temporal"
                ],
                "summary": "Get entity history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start timestamp in RFC3339 format (default: 24 hours ago)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End timestamp in RFC3339 format (default: now)",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Entity"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/list": {
            "get": {
                "description": "List all entities or filter by various criteria",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "List entities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by tag (e.g., type:user)",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by wildcard pattern",
                        "name": "wildcard",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search content",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Content type for search",
                        "name": "contentType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by namespace",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Entity"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/entities/query": {
            "get": {
                "description": "Query entities with advanced sorting, filtering, and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Query entities with advanced filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter field (e.g., created_at, tag:type)",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter operator (eq, ne, gt, lt, gte, lte, like, in)",
                        "name": "operator",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter value",
                        "name": "value",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field (created_at, updated_at, id, tag_count)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc, desc)",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset results",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.QueryEntityResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/entities/update": {
            "put": {
                "description": "Update an existing entity's tags and content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Update an entity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Entity ID (can also be in body)",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "description": "Entity update data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Entity"
                        }
                    }
                }
            }
        },
        "/api/v1/entity-relationships": {
            "get": {
                "description": "Get a specific relationship between two entities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relationships"
                ],
                "summary": "Get relationship",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source entity ID",
                        "name": "source_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Type of relationship",
                        "name": "relationship_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Target entity ID",
                        "name": "target_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RelationshipResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new relationship between two entities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relationships"
                ],
                "summary": "Create relationship",
                "parameters": [
                    {
                        "description": "Relationship data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RelationshipRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.RelationshipResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing relationship between two entities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relationships"
                ],
                "summary": "Delete relationship",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source entity ID",
                        "name": "source_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Type of relationship",
                        "name": "relationship_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Target entity ID",
                        "name": "target_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/entity-relationships/by-source": {
            "get": {
                "description": "List all relationships where the specified entity is the source",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relationships"
                ],
                "summary": "List relationships by source",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source entity ID",
                        "name": "source_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by relationship type",
                        "name": "relationship_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RelationshipListResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/entity-relationships/by-target": {
            "get": {
                "description": "List all relationships where the specified entity is the target",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relationships"
                ],
                "summary": "List relationships by target",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Target entity ID",
                        "name": "target_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by relationship type",
                        "name": "relationship_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RelationshipListResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/entity-relationships/by-type": {
            "get": {
                "description": "List all relationships of a specific type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relationships"
                ],
                "summary": "List relationships by type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of relationship",
                        "name": "relationship_type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RelationshipListResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/feature-flags": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all feature flags",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Get feature flags",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stage filter (alpha, beta, stable)",
                        "name": "stage",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Entity"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/feature-flags/set": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a feature flag value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Set feature flag",
                "parameters": [
                    {
                        "description": "Feature flag data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.FeatureFlagRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Entity"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/available": {
            "get": {
                "description": "Get a list of all metrics being collected",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "List available metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/history": {
            "get": {
                "description": "Retrieve historical values for a specific metric",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get metric history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Metric name (e.g., memory_alloc, entity_count_total)",
                        "name": "metric_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of hours to look back (default: 24)",
                        "name": "hours",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of data points (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Aggregation level: raw, 1min, 1hour, 1day (default: raw)",
                        "name": "aggregation",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.MetricHistoryResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/rbac/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed RBAC metrics including users, authentication, sessions, permissions, and security events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "Get comprehensive RBAC metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RBACMetricsResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/rbac/metrics/public": {
            "get": {
                "description": "Get basic RBAC metrics available without authentication",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "Get public RBAC metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.PublicRBACMetricsResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/system/metrics": {
            "get": {
                "description": "Get comprehensive system metrics specific to EntityDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "EntityDB system metrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SystemMetricsResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/change-password": {
            "post": {
                "description": "Change the current user's password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change user's own password",
                "parameters": [
                    {
                        "description": "Password change data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StatusResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/create": {
            "post": {
                "description": "Create a new user entity with authentication credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Entity"
                        }
                    }
                }
            }
        },
        "/api/v1/users/reset-password": {
            "post": {
                "description": "Reset a user's password (requires admin permission)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Reset user password (admin only)",
                "parameters": [
                    {
                        "description": "Password reset data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.StatusResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get system health status and basic metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.HealthResponse"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Get system metrics in Prometheus format",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Prometheus metrics",
                "responses": {
                    "200": {
                        "description": "Prometheus metrics",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ActivityItem": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "api.ActivityStats": {
            "type": "object",
            "properties": {
                "average_response_time_ms": {
                    "type": "number"
                },
                "error_rate": {
                    "type": "number"
                },
                "operations_per_hour": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "recent_operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.OperationStat"
                    }
                }
            }
        },
        "api.AgentStats": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.ChangePasswordRequest": {
            "type": "object",
            "properties": {
                "current_password": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.ConfigSetRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "api.CreateEntityRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Can be string, map, or byte array (base64 encoded)"
                },
                "id": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.DashboardStatsResponse": {
            "type": "object",
            "properties": {
                "agent_stats": {
                    "$ref": "#/definitions/api.AgentStats"
                },
                "issue_stats": {
                    "$ref": "#/definitions/api.IssueStats"
                },
                "recent_activity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.ActivityItem"
                    }
                },
                "user_count": {
                    "type": "integer"
                },
                "workspace_count": {
                    "type": "integer"
                }
            }
        },
        "api.DatabaseMetrics": {
            "type": "object",
            "properties": {
                "avg_tags_per_entity": {
                    "type": "number"
                },
                "entities_by_status": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "entities_by_type": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "tags_total": {
                    "type": "integer"
                },
                "tags_unique": {
                    "type": "integer"
                },
                "total_entities": {
                    "type": "integer"
                }
            }
        },
        "api.DetailedMemoryMetrics": {
            "description": "Detailed memory usage statistics",
            "type": "object",
            "properties": {
                "alloc_bytes": {
                    "type": "integer",
                    "example": 10031960
                },
                "heap_alloc_bytes": {
                    "type": "integer",
                    "example": 10031960
                },
                "heap_idle_bytes": {
                    "type": "integer",
                    "example": 4472832
                },
                "heap_in_use_bytes": {
                    "type": "integer",
                    "example": 11649024
                },
                "heap_sys_bytes": {
                    "type": "integer",
                    "example": 16121856
                },
                "stack_in_use_bytes": {
                    "type": "integer",
                    "example": 655360
                },
                "sys_bytes": {
                    "type": "integer",
                    "example": 21453840
                },
                "total_alloc_bytes": {
                    "type": "integer",
                    "example": 10685192
                }
            }
        },
        "api.EntitySizeInfo": {
            "type": "object",
            "properties": {
                "entity_type": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "size_bytes": {
                    "type": "integer"
                },
                "tag_count": {
                    "type": "integer"
                }
            }
        },
        "api.EntityStats": {
            "type": "object",
            "properties": {
                "created_this_month": {
                    "type": "integer"
                },
                "created_this_week": {
                    "type": "integer"
                },
                "created_today": {
                    "type": "integer"
                },
                "largest_entity": {
                    "$ref": "#/definitions/api.EntitySizeInfo"
                },
                "smallest_entity": {
                    "$ref": "#/definitions/api.EntitySizeInfo"
                },
                "updated_today": {
                    "type": "integer"
                }
            }
        },
        "api.EnvironmentVariables": {
            "type": "object",
            "properties": {
                "ENTITYDB_ADMIN_USER": {
                    "type": "string"
                },
                "ENTITYDB_AUTH_REQUIRED": {
                    "description": "Security Settings",
                    "type": "string"
                },
                "ENTITYDB_AUTO_BACKUP": {
                    "type": "string"
                },
                "ENTITYDB_BACKUP_INTERVAL": {
                    "type": "string"
                },
                "ENTITYDB_BACKUP_PATH": {
                    "type": "string"
                },
                "ENTITYDB_CACHE_SIZE": {
                    "description": "Performance Settings",
                    "type": "string"
                },
                "ENTITYDB_COMPRESSION": {
                    "type": "string"
                },
                "ENTITYDB_DATASET_DEFAULT": {
                    "type": "string"
                },
                "ENTITYDB_HIGH_PERFORMANCE": {
                    "type": "string"
                },
                "ENTITYDB_HOST": {
                    "type": "string"
                },
                "ENTITYDB_HTTPS_PORT": {
                    "type": "string"
                },
                "ENTITYDB_HTTP_PORT": {
                    "description": "Server Configuration",
                    "type": "string"
                },
                "ENTITYDB_INSTANCE_ID": {
                    "description": "Instance Settings",
                    "type": "string"
                },
                "ENTITYDB_LOG_LEVEL": {
                    "description": "Debug \u0026 Logging",
                    "type": "string"
                },
                "ENTITYDB_LOG_PATH": {
                    "type": "string"
                },
                "ENTITYDB_MAX_CONNECTIONS": {
                    "type": "string"
                },
                "ENTITYDB_METRICS_ENABLED": {
                    "type": "string"
                },
                "ENTITYDB_QUERY_TIMEOUT": {
                    "type": "string"
                },
                "ENTITYDB_RBAC_ENABLED": {
                    "type": "string"
                },
                "ENTITYDB_SESSION_TIMEOUT": {
                    "type": "string"
                },
                "ENTITYDB_SSL_CERT": {
                    "type": "string"
                },
                "ENTITYDB_SSL_ENABLED": {
                    "type": "string"
                },
                "ENTITYDB_SSL_KEY": {
                    "type": "string"
                },
                "ENTITYDB_STORAGE_PATH": {
                    "description": "Storage Configuration",
                    "type": "string"
                },
                "ENTITYDB_WAL_MODE": {
                    "type": "string"
                }
            }
        },
        "api.ErrorResponse": {
            "description": "Error information",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request"
                }
            }
        },
        "api.FeatureFlagRequest": {
            "description": "Feature flag update request",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "flag": {
                    "type": "string",
                    "example": "new_ui"
                }
            }
        },
        "api.HealthMetrics": {
            "description": "System health and performance metrics",
            "type": "object",
            "properties": {
                "database_size_bytes": {
                    "type": "integer",
                    "example": 1048576
                },
                "entity_count": {
                    "type": "integer",
                    "example": 100
                },
                "goroutines": {
                    "type": "integer",
                    "example": 25
                },
                "memory_usage": {
                    "$ref": "#/definitions/api.MemoryMetrics"
                },
                "user_count": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "api.HealthResponse": {
            "type": "object",
            "properties": {
                "checks": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "metrics": {
                    "$ref": "#/definitions/api.HealthMetrics"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "api.IssueStats": {
            "type": "object",
            "properties": {
                "by_priority": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "by_status": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.LogStatusResponse": {
            "type": "object",
            "properties": {
                "level": {
                    "type": "string"
                },
                "subsystems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.LoginRequest": {
            "description": "Login credentials",
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "api.LoginResponse": {
            "description": "Authentication response with session token",
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string",
                    "example": "2025-01-01T12:00:00Z"
                },
                "token": {
                    "type": "string",
                    "example": "token_abc123..."
                },
                "user": {
                    "$ref": "#/definitions/api.UserInfo"
                }
            }
        },
        "api.MemoryMetrics": {
            "description": "Memory usage statistics",
            "type": "object",
            "properties": {
                "alloc_bytes": {
                    "type": "integer",
                    "example": 10485760
                },
                "num_gc": {
                    "type": "integer",
                    "example": 5
                },
                "sys_bytes": {
                    "type": "integer",
                    "example": 73400320
                },
                "total_alloc_bytes": {
                    "type": "integer",
                    "example": 20971520
                }
            }
        },
        "api.MetricDataPoint": {
            "type": "object",
            "properties": {
                "timestamp": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "api.MetricHistoryResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "data_points": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.MetricDataPoint"
                    }
                },
                "end_time": {
                    "type": "string"
                },
                "metric_name": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "api.OperationStat": {
            "type": "object",
            "properties": {
                "duration_ms": {
                    "type": "number"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "api.PerformanceMetrics": {
            "description": "Performance and runtime metrics",
            "type": "object",
            "properties": {
                "error_count": {
                    "type": "number",
                    "example": 0
                },
                "gc_runs": {
                    "type": "integer",
                    "example": 3
                },
                "http_request_duration_ms": {
                    "type": "number",
                    "example": 223.4
                },
                "http_requests_total": {
                    "type": "number",
                    "example": 15
                },
                "index_lookups": {
                    "type": "integer",
                    "example": 0
                },
                "last_gc_pause_ns": {
                    "type": "integer",
                    "example": 140707
                },
                "query_cache_hits": {
                    "type": "integer",
                    "example": 0
                },
                "query_cache_miss": {
                    "type": "integer",
                    "example": 0
                },
                "query_execution_time_ms": {
                    "type": "number",
                    "example": 2.1
                },
                "storage_read_duration_ms": {
                    "type": "number",
                    "example": 1.2
                },
                "storage_write_duration_ms": {
                    "type": "number",
                    "example": 5.8
                },
                "total_gc_pause_ns": {
                    "type": "integer",
                    "example": 236206
                }
            }
        },
        "api.PublicRBACMetricsResponse": {
            "type": "object",
            "properties": {
                "auth": {
                    "$ref": "#/definitions/api.SimplifiedAuthMetrics"
                },
                "sessions": {
                    "$ref": "#/definitions/api.PublicSessionMetrics"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "api.PublicSessionMetrics": {
            "type": "object",
            "properties": {
                "active_count": {
                    "type": "integer"
                }
            }
        },
        "api.QueryEntityResponse": {
            "type": "object",
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Entity"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.RBACMetricsResponse": {
            "type": "object",
            "properties": {
                "auth": {
                    "$ref": "#/definitions/api.SimplifiedAuthMetrics"
                },
                "permissions": {
                    "$ref": "#/definitions/api.SimplifiedPermissionMetrics"
                },
                "security_events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.SecurityEvent"
                    }
                },
                "sessions": {
                    "$ref": "#/definitions/api.SimplifiedSessionMetrics"
                },
                "timestamp": {
                    "type": "string"
                },
                "users": {
                    "$ref": "#/definitions/api.SimplifiedUserMetrics"
                }
            }
        },
        "api.RelationshipListResponse": {
            "description": "List of entity relationships",
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 5
                },
                "relationships": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.RelationshipResponse"
                    }
                }
            }
        },
        "api.RelationshipRequest": {
            "description": "Relationship creation data",
            "type": "object",
            "properties": {
                "relationship_type": {
                    "type": "string",
                    "example": "contains"
                },
                "source_id": {
                    "type": "string",
                    "example": "entity_123"
                },
                "target_id": {
                    "type": "string",
                    "example": "entity_456"
                }
            }
        },
        "api.RelationshipResponse": {
            "description": "Entity relationship",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-01T10:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "rel_789"
                },
                "relationship_type": {
                    "type": "string",
                    "example": "contains"
                },
                "source_id": {
                    "type": "string",
                    "example": "entity_123"
                },
                "target_id": {
                    "type": "string",
                    "example": "entity_456"
                }
            }
        },
        "api.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.SecurityEvent": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.SetLogLevelRequest": {
            "type": "object",
            "properties": {
                "level": {
                    "type": "string"
                }
            }
        },
        "api.SetTraceSubsystemsRequest": {
            "type": "object",
            "properties": {
                "clear": {
                    "type": "boolean"
                },
                "disable": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enable": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.SimplifiedAuthMetrics": {
            "type": "object",
            "properties": {
                "failed_logins": {
                    "type": "integer"
                },
                "success_rate": {
                    "type": "number"
                },
                "successful_logins": {
                    "type": "integer"
                }
            }
        },
        "api.SimplifiedPermissionMetrics": {
            "type": "object",
            "properties": {
                "cache_hit_rate": {
                    "type": "number"
                },
                "checks_per_second": {
                    "type": "number"
                },
                "total_checks": {
                    "type": "integer"
                }
            }
        },
        "api.SimplifiedSessionMetrics": {
            "type": "object",
            "properties": {
                "active_count": {
                    "type": "integer"
                },
                "avg_duration_ms": {
                    "type": "number"
                },
                "total_today": {
                    "type": "integer"
                }
            }
        },
        "api.SimplifiedUserMetrics": {
            "type": "object",
            "properties": {
                "admin_count": {
                    "type": "integer"
                },
                "total_users": {
                    "type": "integer"
                }
            }
        },
        "api.StatusResponse": {
            "description": "Status message",
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "api.StorageMetrics": {
            "type": "object",
            "properties": {
                "avg_read_latency_ms": {
                    "type": "number"
                },
                "avg_write_latency_ms": {
                    "type": "number"
                },
                "cache_hit_rate": {
                    "type": "number"
                },
                "compression_ratio": {
                    "type": "number"
                },
                "database_size_bytes": {
                    "type": "integer"
                },
                "index_size_bytes": {
                    "type": "integer"
                },
                "read_bytes": {
                    "type": "integer"
                },
                "read_operations": {
                    "type": "integer"
                },
                "total_storage_bytes": {
                    "type": "integer"
                },
                "wal_size_bytes": {
                    "type": "integer"
                },
                "write_bytes": {
                    "type": "integer"
                },
                "write_operations": {
                    "type": "integer"
                }
            }
        },
        "api.SuccessResponse": {
            "description": "Generic success response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "api.SystemInfo": {
            "description": "System information and runtime details",
            "type": "object",
            "properties": {
                "current_time": {
                    "type": "string",
                    "example": "2025-05-22T14:27:30.71157084+01:00"
                },
                "go_version": {
                    "type": "string",
                    "example": "go1.24.2"
                },
                "num_cpu": {
                    "type": "integer",
                    "example": 8
                },
                "num_goroutines": {
                    "type": "integer",
                    "example": 24
                },
                "start_time": {
                    "type": "string",
                    "example": "2025-05-22T14:25:18.060290081+01:00"
                },
                "uptime": {
                    "type": "integer",
                    "example": 132651279965
                },
                "uptime_seconds": {
                    "type": "number",
                    "example": 132.651279965
                },
                "version": {
                    "type": "string",
                    "example": "2.14.0+"
                }
            }
        },
        "api.SystemMetricsResponse": {
            "type": "object",
            "properties": {
                "activity_stats": {
                    "$ref": "#/definitions/api.ActivityStats"
                },
                "database": {
                    "$ref": "#/definitions/api.DatabaseMetrics"
                },
                "entity_stats": {
                    "$ref": "#/definitions/api.EntityStats"
                },
                "environment": {
                    "$ref": "#/definitions/api.EnvironmentVariables"
                },
                "memory": {
                    "$ref": "#/definitions/api.DetailedMemoryMetrics"
                },
                "performance": {
                    "$ref": "#/definitions/api.PerformanceMetrics"
                },
                "storage": {
                    "$ref": "#/definitions/api.StorageMetrics"
                },
                "system": {
                    "$ref": "#/definitions/api.SystemInfo"
                },
                "temporal": {
                    "$ref": "#/definitions/api.TemporalMetrics"
                }
            }
        },
        "api.TemporalMetrics": {
            "type": "object",
            "properties": {
                "average_timestamp_age_hours": {
                    "type": "number"
                },
                "non_temporal_tags_count": {
                    "type": "integer"
                },
                "temporal_tags_count": {
                    "type": "integer"
                },
                "temporal_tags_ratio": {
                    "type": "number"
                },
                "time_range_end": {
                    "type": "string"
                },
                "time_range_start": {
                    "type": "string"
                }
            }
        },
        "api.UserInfo": {
            "description": "User details",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "entity_user_admin"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "admin",
                        "user"
                    ]
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "models.Entity": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content stores binary data (files, JSON, credentials, etc.)\nSupports autochunking for large files",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "created_at": {
                    "description": "CreatedAt is the creation timestamp in nanoseconds since Unix epoch",
                    "type": "integer"
                },
                "id": {
                    "description": "ID is the unique identifier for the entity (typically a UUID)",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags are temporal tags with nanosecond timestamps\nFormat: \"TIMESTAMP|tag\" or \"TIMESTAMP.tag\"",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "description": "UpdatedAt is the last modification timestamp in nanoseconds since Unix epoch",
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Bearer token authentication. Example: \"Bearer \u003ctoken\u003e\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}