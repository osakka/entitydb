#!/bin/bash
# Improved script for running API tests for AIWO
# This script runs all API tests and generates a summary report

# Define colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
TEST_DIR="/opt/aiwo/share/tests/api"
LOG_DIR="/opt/aiwo/var/log"
TEST_LOG="${LOG_DIR}/api_tests.log"
SUMMARY_FILE="${LOG_DIR}/test_summary.txt"

# Ensure log directory exists
mkdir -p "${LOG_DIR}"

# Initialize log files
> "${TEST_LOG}"
> "${SUMMARY_FILE}"

# Function to print section headers
print_section() {
  echo -e "\n${BLUE}========== $1 ==========${NC}\n"
  echo "========== $1 ==========" >> "${TEST_LOG}"
}

# Function to run tests in a directory and capture results
run_tests_in_dir() {
  local dir=$1
  local test_type=$2
  
  if [ ! -d "${dir}" ]; then
    echo -e "${YELLOW}Warning: Test directory ${dir} not found, skipping ${test_type} tests${NC}"
    echo "Warning: Test directory ${dir} not found, skipping ${test_type} tests" >> "${TEST_LOG}"
    return 0
  fi
  
  print_section "Running ${test_type} Tests"
  
  local pass_count=0
  local fail_count=0
  local test_count=0
  
  for test_file in $(find "${dir}" -name "test_*.sh" -type f | sort); do
    test_name=$(basename "${test_file}")
    test_count=$((test_count + 1))
    
    echo -e "${YELLOW}Running test: ${test_name}${NC}"
    echo "Running test: ${test_name}" >> "${TEST_LOG}"
    
    # Make the test executable if it's not already
    chmod +x "${test_file}"
    
    # Run the test and capture output
    output=$(bash "${test_file}" 2>&1)
    exit_code=$?
    
    # Log the output
    echo "${output}" >> "${TEST_LOG}"
    
    # Check result
    if [ ${exit_code} -eq 0 ]; then
      echo -e "${GREEN}✓ ${test_name} PASSED${NC}"
      echo "✓ ${test_name} PASSED" >> "${SUMMARY_FILE}"
      pass_count=$((pass_count + 1))
    else
      echo -e "${RED}✗ ${test_name} FAILED${NC}"
      echo "✗ ${test_name} FAILED" >> "${SUMMARY_FILE}"
      echo "${output}" | tail -n 10
      fail_count=$((fail_count + 1))
    fi
  done
  
  # Print summary for this section
  echo -e "\n${BLUE}${test_type} Tests Summary: ${pass_count}/${test_count} passed${NC}"
  if [ ${fail_count} -gt 0 ]; then
    echo -e "${RED}${fail_count} tests failed${NC}"
  fi
  
  echo "${test_type} Tests Summary: ${pass_count}/${test_count} passed" >> "${SUMMARY_FILE}"
  if [ ${fail_count} -gt 0 ]; then
    echo "${fail_count} tests failed" >> "${SUMMARY_FILE}"
  fi
  
  return ${fail_count}
}

# Print header
print_section "AIWO API Tests"
echo "Test run started at $(date)"
echo "Test run started at $(date)" >> "${SUMMARY_FILE}"

# Initialize counters for overall summary
total_pass=0
total_fail=0

# Run core API tests
run_tests_in_dir "${TEST_DIR}/core" "Core API"
core_fail=$?
[ ${core_fail} -eq 0 ] && total_pass=$((total_pass + 1)) || total_fail=$((total_fail + 1))

# Run RBAC tests
run_tests_in_dir "${TEST_DIR}/rbac" "RBAC"
rbac_fail=$?
[ ${rbac_fail} -eq 0 ] && total_pass=$((total_pass + 1)) || total_fail=$((total_fail + 1))

# Run Entity tests
run_tests_in_dir "${TEST_DIR}/entity" "Entity"
entity_fail=$?
[ ${entity_fail} -eq 0 ] && total_pass=$((total_pass + 1)) || total_fail=$((total_fail + 1))

# Run Issue tests
run_tests_in_dir "${TEST_DIR}/issue" "Issue"
issue_fail=$?
[ ${issue_fail} -eq 0 ] && total_pass=$((total_pass + 1)) || total_fail=$((total_fail + 1))

# Run Agent tests
run_tests_in_dir "${TEST_DIR}/agent" "Agent"
agent_fail=$?
[ ${agent_fail} -eq 0 ] && total_pass=$((total_pass + 1)) || total_fail=$((total_fail + 1))

# Run Session tests
run_tests_in_dir "${TEST_DIR}/session" "Session"
session_fail=$?
[ ${session_fail} -eq 0 ] && total_pass=$((total_pass + 1)) || total_fail=$((total_fail + 1))

# Print overall summary
print_section "Overall Test Summary"
echo "Test run completed at $(date)"
echo "Test run completed at $(date)" >> "${SUMMARY_FILE}"

total_components=$((total_pass + total_fail))
if [ ${total_fail} -eq 0 ]; then
  echo -e "${GREEN}All component tests passed!${NC}"
  echo "All component tests passed!" >> "${SUMMARY_FILE}"
  exit 0
else
  echo -e "${RED}${total_fail}/${total_components} component test suites failed${NC}"
  echo "${total_fail}/${total_components} component test suites failed" >> "${SUMMARY_FILE}"
  echo -e "${YELLOW}See detailed logs at:${NC} ${TEST_LOG}"
  echo "See detailed logs at: ${TEST_LOG}" >> "${SUMMARY_FILE}"
  exit 1
fi