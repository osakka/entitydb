{
  "swagger": "2.0",
  "info": {
    "title": "EntityDB API",
    "description": "A high-performance temporal database with pure entity-based architecture.\n\nEntityDB is a temporal database where every tag is timestamped with nanosecond precision.\nAll data is stored in a custom binary format (EBF) with Write-Ahead Logging for durability\nand concurrent access support.\n",
    "version": "2.13.0",
    "contact": {
      "name": "EntityDB Support",
      "email": "support@entitydb.io"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/osakka/entitydb/blob/main/LICENSE"
    }
  },
  "host": "localhost:8085",
  "basePath": "/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Bearer token authentication. Example: 'Bearer <token>'"
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication operations"
    },
    {
      "name": "entities",
      "description": "Entity CRUD operations"
    },
    {
      "name": "temporal",
      "description": "Temporal query operations"
    },
    {
      "name": "relationships",
      "description": "Entity relationship operations"
    },
    {
      "name": "users",
      "description": "User management operations"
    },
    {
      "name": "config",
      "description": "System configuration operations"
    },
    {
      "name": "dashboard",
      "description": "Dashboard and statistics operations"
    },
    {
      "name": "status",
      "description": "System status operations"
    }
  ],
  "paths": {
    "/status": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get API status",
        "description": "Check if the API is up and running",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "API status",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "ok"
                },
                "version": {
                  "type": "string",
                  "example": "2.13.0"
                },
                "time": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "description": "Authenticate user and receive session token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login credentials",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username",
                "password"
              ],
              "properties": {
                "username": {
                  "type": "string",
                  "example": "admin"
                },
                "password": {
                  "type": "string",
                  "example": "admin"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                },
                "expires_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "description": "Invalidate the current session",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/entities/list": {
      "get": {
        "tags": [
          "entities"
        ],
        "summary": "List entities",
        "description": "List all entities or filter by various criteria",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by tag (e.g., type:user)",
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter by multiple tags (comma-separated)",
            "type": "string"
          },
          {
            "name": "wildcard",
            "in": "query",
            "description": "Filter by wildcard pattern",
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search content",
            "type": "string"
          },
          {
            "name": "include_timestamps",
            "in": "query",
            "description": "Include timestamps in tags",
            "type": "boolean",
            "default": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return",
            "type": "integer",
            "default": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of results to skip",
            "type": "integer",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of entities",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Entity"
                  }
                },
                "total": {
                  "type": "integer"
                },
                "offset": {
                  "type": "integer"
                },
                "limit": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/entities/get": {
      "get": {
        "tags": [
          "entities"
        ],
        "summary": "Get entity by ID",
        "description": "Retrieve an entity by its ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Entity ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "include_timestamps",
            "in": "query",
            "description": "Include timestamps in tags",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Entity details",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/entities/create": {
      "post": {
        "tags": [
          "entities"
        ],
        "summary": "Create entity",
        "description": "Create a new entity with tags and content",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Entity to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEntityRequest"
            }
          },
          {
            "name": "include_timestamps",
            "in": "query",
            "description": "Include timestamps in response tags",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/entities/update": {
      "put": {
        "tags": [
          "entities"
        ],
        "summary": "Update entity",
        "description": "Update an existing entity",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Entity update details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEntityRequest"
            }
          },
          {
            "name": "include_timestamps",
            "in": "query",
            "description": "Include timestamps in response tags",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Entity updated",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/entities/query": {
      "get": {
        "tags": [
          "entities"
        ],
        "summary": "Advanced entity query",
        "description": "Query entities with advanced filtering, sorting, and pagination",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Filter by tags (comma-separated)",
            "type": "string"
          },
          {
            "name": "pattern",
            "in": "query",
            "description": "Wildcard tag pattern",
            "type": "string"
          },
          {
            "name": "content_type",
            "in": "query",
            "description": "Filter by content type",
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field (created_at, updated_at, id)",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order (asc, desc)",
            "type": "string",
            "default": "desc"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results",
            "type": "integer",
            "default": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of results to skip",
            "type": "integer",
            "default": 0
          },
          {
            "name": "include_timestamps",
            "in": "query",
            "description": "Include timestamps in tags",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Query results",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Entity"
                  }
                },
                "total": {
                  "type": "integer"
                },
                "offset": {
                  "type": "integer"
                },
                "limit": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/entities/as-of": {
      "get": {
        "tags": [
          "temporal"
        ],
        "summary": "Get entity as of a specific time",
        "description": "Retrieve an entity with tags as they were at a specific point in time",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Entity ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Timestamp in RFC3339 format (e.g., 2025-01-01T00:00:00Z)",
            "required": true,
            "type": "string"
          },
          {
            "name": "include_timestamps",
            "in": "query",
            "description": "Include timestamps in tags",
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Entity at the specified time",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/entities/history": {
      "get": {
        "tags": [
          "temporal"
        ],
        "summary": "Get entity history",
        "description": "Retrieve the complete history of an entity's tags",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Entity ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start timestamp in RFC3339 format",
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "End timestamp in RFC3339 format",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of history records",
            "type": "integer",
            "default": 100
          }
        ],
        "responses": {
          "200": {
            "description": "Entity history",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "history": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EntityHistory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/entities/changes": {
      "get": {
        "tags": [
          "temporal"
        ],
        "summary": "Get recent entity changes",
        "description": "Retrieve recent changes to entities",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Start timestamp in RFC3339 format",
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "End timestamp in RFC3339 format",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of changes",
            "type": "integer",
            "default": 100
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter by tags (comma-separated)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Recent entity changes",
            "schema": {
              "type": "object",
              "properties": {
                "changes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EntityChange"
                  }
                },
                "start": {
                  "type": "string",
                  "format": "date-time"
                },
                "end": {
                  "type": "string",
                  "format": "date-time"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/entities/diff": {
      "get": {
        "tags": [
          "temporal"
        ],
        "summary": "Compare entity at different times",
        "description": "Compare an entity's tags between two points in time",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Entity ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "t1",
            "in": "query",
            "description": "First timestamp in RFC3339 format",
            "required": true,
            "type": "string"
          },
          {
            "name": "t2",
            "in": "query",
            "description": "Second timestamp in RFC3339 format",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Entity diff",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "t1": {
                  "type": "string",
                  "format": "date-time"
                },
                "t2": {
                  "type": "string",
                  "format": "date-time"
                },
                "added": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "removed": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "unchanged": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/entity-relationships": {
      "get": {
        "tags": [
          "relationships"
        ],
        "summary": "Get entity relationships",
        "description": "Retrieve relationships for an entity",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "description": "Source entity ID",
            "type": "string"
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target entity ID",
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Relationship type",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Entity relationships",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntityRelationship"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "relationships"
        ],
        "summary": "Create entity relationship",
        "description": "Create a relationship between two entities",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Relationship details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRelationshipRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Relationship created",
            "schema": {
              "$ref": "#/definitions/EntityRelationship"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Relationship already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/create": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create new user",
        "description": "Create a new user with specified roles",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Username already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/config": {
      "get": {
        "tags": [
          "config"
        ],
        "summary": "Get system configuration",
        "description": "Retrieve system configuration settings",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "System configuration",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/config/set": {
      "post": {
        "tags": [
          "config"
        ],
        "summary": "Set system configuration",
        "description": "Update system configuration settings",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Configuration settings",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration updated",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/feature-flags": {
      "get": {
        "tags": [
          "config"
        ],
        "summary": "Get feature flags",
        "description": "Retrieve feature flag settings",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Feature flags",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/feature-flags/set": {
      "post": {
        "tags": [
          "config"
        ],
        "summary": "Set feature flag",
        "description": "Update a feature flag setting",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Feature flag setting",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "flag",
                "enabled"
              ],
              "properties": {
                "flag": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature flag updated",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "success"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dashboard/stats": {
      "get": {
        "tags": [
          "dashboard"
        ],
        "summary": "Get system statistics",
        "description": "Retrieve system-wide statistics",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "System statistics",
            "schema": {
              "type": "object",
              "properties": {
                "entity_count": {
                  "type": "integer"
                },
                "user_count": {
                  "type": "integer"
                },
                "relationship_count": {
                  "type": "integer"
                },
                "storage_size": {
                  "type": "integer"
                },
                "uptime": {
                  "type": "integer"
                },
                "version": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Entity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content": {
          "type": "string",
          "format": "byte",
          "description": "Base64 encoded content"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CreateEntityRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Optional entity ID (will be generated if not provided)"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content": {
          "type": "object",
          "description": "Entity content (string, object, or array)"
        }
      }
    },
    "UpdateEntityRequest": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content": {
          "type": "object",
          "description": "Entity content (string, object, or array)"
        },
        "add_tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags to add to the entity"
        },
        "remove_tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags to remove from the entity"
        }
      }
    },
    "EntityHistory": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "change_type": {
          "type": "string",
          "enum": [
            "created",
            "updated",
            "tag_added",
            "tag_removed"
          ]
        },
        "tag": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "EntityChange": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "change_type": {
          "type": "string",
          "enum": [
            "created",
            "updated",
            "tag_added",
            "tag_removed"
          ]
        },
        "tag": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "EntityRelationship": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "source_id": {
          "type": "string"
        },
        "relationship_type": {
          "type": "string"
        },
        "target_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CreateRelationshipRequest": {
      "type": "object",
      "required": [
        "source_id",
        "relationship_type",
        "target_id"
      ],
      "properties": {
        "source_id": {
          "type": "string"
        },
        "relationship_type": {
          "type": "string"
        },
        "target_id": {
          "type": "string"
        }
      }
    },
    "CreateUserRequest": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "user"
          ]
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "error"
          ]
        },
        "code": {
          "type": "integer"
        }
      }
    },
    "StatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "success",
            "error"
          ]
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}