name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk "/^## \[?${{ steps.get_version.outputs.VERSION }}\]?/,/^## \[?[0-9]/ { if(/^## \[?[0-9]/ && !/^## \[?${{ steps.get_version.outputs.VERSION }}\]?/) exit; print }" CHANGELOG.md > release_notes.md
          else
            echo "Release ${{ steps.get_version.outputs.VERSION }}" > release_notes.md
            echo "" >> release_notes.md
            echo "Changes in this release:" >> release_notes.md
            git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
          fi
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: EntityDB ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          cd src
          go build -ldflags "-X main.Version=${{ needs.create-release.outputs.version }} -X main.BuildDate=$(date -u +%Y-%m-%d)" \
                   -o ../dist/entitydb-${{ matrix.suffix }} main.go
                   
      - name: Create archive
        run: |
          cd dist
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip entitydb-${{ needs.create-release.outputs.version }}-${{ matrix.suffix }}.zip entitydb-${{ matrix.suffix }}
            echo "ASSET_NAME=entitydb-${{ needs.create-release.outputs.version }}-${{ matrix.suffix }}.zip" >> $GITHUB_ENV
            echo "ASSET_PATH=dist/entitydb-${{ needs.create-release.outputs.version }}-${{ matrix.suffix }}.zip" >> $GITHUB_ENV
          else
            tar czf entitydb-${{ needs.create-release.outputs.version }}-${{ matrix.suffix }}.tar.gz entitydb-${{ matrix.suffix }}
            echo "ASSET_NAME=entitydb-${{ needs.create-release.outputs.version }}-${{ matrix.suffix }}.tar.gz" >> $GITHUB_ENV
            echo "ASSET_PATH=dist/entitydb-${{ needs.create-release.outputs.version }}-${{ matrix.suffix }}.tar.gz" >> $GITHUB_ENV
          fi
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.create-release.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max